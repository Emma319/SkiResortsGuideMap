{"ast":null,"code":"import axios from 'axios';\nexport function getGoogleMap() {\n  // If the promise is not defined yet, define it\n  if (!this.googleMapPromise) {\n    this.googleMapPromise = new Promise(function (resolve) {\n      // Add a global handler for when the API finishes loading\n      window.resolveGoogleMapPromise = function () {\n        resolve(window.google); // Resolve the promise\n\n        delete window.resolveGoogleMapPromise; // Clean up\n      }; // Load the Google Map API\n\n\n      var script = document.createElement(\"script\");\n      var API = 'AIzaSyBqGLhaozeD1dM_yjBJceWe4-Pw6DID5Qg';\n      script.src = \"https://maps.googleapis.com/maps/api/js?key=\".concat(API, \"&callback=resolveGoogleMapPromise\");\n      script.async = true;\n      script.defer = true;\n      document.body.appendChild(script);\n    });\n  } // Return a promise for the Google Map API\n\n\n  return this.googleMapPromise;\n}\nexport function getVenues() {\n  return new Promise(function (resolve) {\n    // Foursquare API parameters\n    var endPoint = \"https://api.foursquare.com/v2/venues/search?\";\n    var parameters = {\n      client_id: \"JITY1KOHGHGZ4JO5OVQG5P1O4EFQEBNFW5E3OZZV1T0OOIRP\",\n      client_secret: \"WTMRA5V5MPGURXNIIT4WUK13FOAZJFO5V40CWB5PVTKNCOAL\",\n      query: \"ski resort\",\n      ll: \"39.0925, -120.0334\",\n      limit: 10,\n      v: \"20182507\"\n    }; // Make a request for venues\n\n    axios.get(endPoint + new URLSearchParams(parameters)).then(function (response) {\n      return resolve(response.data.response.venues);\n    }).catch(function (error) {\n      console.log(\"Error getting venues!! \" + error);\n    });\n  });\n}\nexport function getVenuePhoto(VenueID) {\n  return new Promise(function (resolve) {\n    // Foursquare API parameters\n    var endPoint = \"https://api.foursquare.com/v2/venues/\".concat(VenueID, \"/photos?\");\n    var parameters = {\n      client_id: \"JITY1KOHGHGZ4JO5OVQG5P1O4EFQEBNFW5E3OZZV1T0OOIRP\",\n      client_secret: \"WTMRA5V5MPGURXNIIT4WUK13FOAZJFO5V40CWB5PVTKNCOAL\",\n      VENUE_ID: VenueID,\n      limit: 1,\n      v: \"20182507\"\n    }; // Make a request for venue photo\n\n    axios.get(endPoint + new URLSearchParams(parameters)).then(function (response) {\n      var photoData = response.data.response.photos.items[0];\n      return resolve(photoData.prefix + \"300x300\" + photoData.suffix);\n    }).catch(function (error) {\n      console.log(\"Error get venue photo!! \" + error);\n    });\n  });\n}\nexport function getWiki(query) {\n  return new Promise(function (resolve) {\n    // Wikipedida API parameters\n    var wikiURL = \"https://en.wikipedia.org/w/api.php?\";\n    var parameters = {\n      origin: \"*\",\n      format: \"json\",\n      action: \"query\",\n      titles: query,\n      prop: \"pageimages|description|extracts\",\n      piprop: \"name|thumbnail\",\n      pithumbsize: 500,\n      exsentences: 5,\n      explaintext: 1\n    }; // Make a request for wiki data\n\n    axios.get(wikiURL + new URLSearchParams(parameters)).then(function (response) {\n      return resolve(response.data.query.pages[140899]);\n    }).catch(function (error) {\n      console.log(\"Error getting wiki!! \" + error);\n    });\n  });\n}\nexport function getWikiURL(query) {\n  return new Promise(function (resolve) {\n    // Wikipedida API parameters\n    var wikiURL = \"https://en.wikipedia.org/w/api.php?\";\n    var parameters = {\n      origin: \"*\",\n      format: \"json\",\n      action: \"opensearch\",\n      limit: 1,\n      search: query\n    }; // Make a request for wikiURL\n\n    axios.get(wikiURL + new URLSearchParams(parameters)).then(function (response) {\n      return resolve(response.data[3][0]);\n    }).catch(function (error) {\n      console.log(\"Error getting wikiURL!! \" + error);\n    });\n  });\n}","map":{"version":3,"sources":["/Users/macbookpro/Desktop/MOOC/Udacity/GWG/FEWD/05 Building with React/Project7_NeighborhoodMap/Project7/src/API.js"],"names":["axios","getGoogleMap","googleMapPromise","Promise","resolve","window","resolveGoogleMapPromise","google","script","document","createElement","API","src","async","defer","body","appendChild","getVenues","endPoint","parameters","client_id","client_secret","query","ll","limit","v","get","URLSearchParams","then","response","data","venues","catch","error","console","log","getVenuePhoto","VenueID","VENUE_ID","photoData","photos","items","prefix","suffix","getWiki","wikiURL","origin","format","action","titles","prop","piprop","pithumbsize","exsentences","explaintext","pages","getWikiURL","search"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nexport function getGoogleMap() {\n    // If the promise is not defined yet, define it\n    if(!this.googleMapPromise) {\n        this.googleMapPromise = new Promise((resolve) => {\n            // Add a global handler for when the API finishes loading\n            window.resolveGoogleMapPromise = () => {\n                resolve(window.google); // Resolve the promise\n                delete window.resolveGoogleMapPromise; // Clean up\n            };\n\n            // Load the Google Map API\n            const script = document.createElement(\"script\");\n            const API = 'AIzaSyBqGLhaozeD1dM_yjBJceWe4-Pw6DID5Qg';\n            script.src = `https://maps.googleapis.com/maps/api/js?key=${API}&callback=resolveGoogleMapPromise`;\n            script.async = true;\n            script.defer = true;\n            document.body.appendChild(script);\n        });\n    }\n    // Return a promise for the Google Map API\n    return this.googleMapPromise;\n}\n\nexport function getVenues() {\n    return new Promise((resolve) => {\n        // Foursquare API parameters\n        const endPoint = \"https://api.foursquare.com/v2/venues/search?\";\n        const parameters = {\n            client_id: \"JITY1KOHGHGZ4JO5OVQG5P1O4EFQEBNFW5E3OZZV1T0OOIRP\",\n            client_secret: \"WTMRA5V5MPGURXNIIT4WUK13FOAZJFO5V40CWB5PVTKNCOAL\",\n            query: \"ski resort\",\n            ll: \"39.0925, -120.0334\",\n            limit: 10,\n            v: \"20182507\"\n        };\n\n        // Make a request for venues\n        axios.get(endPoint + new URLSearchParams(parameters))\n            .then(response => {\n                return resolve(response.data.response.venues);\n            })\n            .catch(error => {\n                console.log(\"Error getting venues!! \" + error);\n            });\n    });\n}\n\nexport function getVenuePhoto(VenueID) {\n    return new Promise((resolve) => {\n        // Foursquare API parameters\n        const endPoint = `https://api.foursquare.com/v2/venues/${VenueID}/photos?`;\n        const parameters = {\n            client_id: \"JITY1KOHGHGZ4JO5OVQG5P1O4EFQEBNFW5E3OZZV1T0OOIRP\",\n            client_secret: \"WTMRA5V5MPGURXNIIT4WUK13FOAZJFO5V40CWB5PVTKNCOAL\",\n            VENUE_ID: VenueID,\n            limit: 1,\n            v: \"20182507\"\n        };\n\n        // Make a request for venue photo\n        axios.get(endPoint + new URLSearchParams(parameters))\n            .then(response => {\n                let photoData = response.data.response.photos.items[0];\n                return resolve(photoData.prefix + \"300x300\" + photoData.suffix);\n            })\n            .catch(error => {\n                console.log(\"Error get venue photo!! \" + error);\n            });\n    });\n}\n\nexport function getWiki(query) {\n    return new Promise((resolve) => {\n        // Wikipedida API parameters\n        const wikiURL = \"https://en.wikipedia.org/w/api.php?\";\n        const parameters = {\n            origin: \"*\",\n            format: \"json\",\n            action: \"query\",\n            titles: query,\n            prop: \"pageimages|description|extracts\",\n            piprop: \"name|thumbnail\",\n            pithumbsize: 500,\n            exsentences: 5,\n            explaintext: 1\n        };\n\n        // Make a request for wiki data\n        axios.get(wikiURL + new URLSearchParams(parameters))\n            .then(response => {\n                return resolve(response.data.query.pages[140899]);\n            })\n            .catch(error => {\n                console.log(\"Error getting wiki!! \" + error);\n            });\n    });\n}\n\nexport function getWikiURL(query) {\n    return new Promise((resolve) => {\n        // Wikipedida API parameters\n        const wikiURL = \"https://en.wikipedia.org/w/api.php?\";\n        const parameters = {\n            origin: \"*\",\n            format: \"json\",\n            action: \"opensearch\",\n            limit: 1,\n            search: query\n        };\n\n        // Make a request for wikiURL\n        axios.get(wikiURL + new URLSearchParams(parameters))\n            .then(response => {\n                return resolve(response.data[3][0]);\n            })\n            .catch(error => {\n                console.log(\"Error getting wikiURL!! \" + error);\n            });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}